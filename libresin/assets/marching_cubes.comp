#version 430

#define LOCAL_SIZE 8
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = LOCAL_SIZE) in;

layout (binding = 0) buffer edgeTable { int edge_table[];};
layout (binding = 1) buffer triTable { int tri_table[];};
layout (binding = 2) buffer vertBuffer { vec4 vertex_buffer[]; };
layout (binding = 3) buffer vertexCountBuffer { uint vertex_size; };
layout (binding = 4) buffer normalBuffer { vec4 normal_buffer[];};
layout (std430, binding = 5) buffer uvBuffer { vec2 uv_buffer[];};


uniform vec3 u_boundingBoxStart;
uniform vec3 u_boundingBoxEnd;
uniform uint u_marchRes;
uniform float u_farPlane;

#include "sdf.glsl"
#external_definition SDF_CODE
#external_definition MAX_UBO_NODE_COUNT

const int kMaxNodeCount = MAX_UBO_NODE_COUNT;
layout (std140, binding = 1) uniform Data
{
    node u_sdf_primitives[kMaxNodeCount];
};

const ivec2 edgeVertexPairs [12] = ivec2[](
/*
          3-------2
         /|      /|
        7-------6 |
        | |     | |
        | 0-----|-1
        |/      |/
        4-------5
        */
ivec2(0, 1), // Edge 0
ivec2(1, 2), // Edge 1
ivec2(2, 3), // Edge 2
ivec2(3, 0), // Edge 3
ivec2(4, 5), // Edge 4
ivec2(5, 6), // Edge 5
ivec2(6, 7), // Edge 6
ivec2(7, 4), // Edge 7
ivec2(0, 4), // Edge 8
ivec2(1, 5), // Edge 9
ivec2(2, 6), // Edge 10
ivec2(3, 7)  // Edge 11
);


vec2 map(vec3 pos)
{
    return SDF_CODE;
}

// https://iquilezles.org/articles/normalsSDF
vec3 calcNormal(vec3 pos)
{
    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times
    vec3 n = vec3(0.0);
    for (int i = 0; i < 4; i++)
    {
        vec3 e = 0.5773 * (2.0 * vec3((((i + 3) >> 1) & 1), ((i >> 1) & 1), (i & 1)) - 1.0);
        n += e * map(pos + 0.0005 * e).x;
        //if( n.x+n.y+n.z>100.0 ) break;
    }
    return normalize(n);
}

// For temporary UVs
vec2 planarProjection(vec3 position, vec3 voxelSize) {
    return position.xy / vec2(u_marchRes * voxelSize.x, u_marchRes * voxelSize.y);
}


void main() {
    ivec3 globalID = ivec3(gl_GlobalInvocationID);
    vec3 voxelSize = (u_boundingBoxEnd - u_boundingBoxStart) / u_marchRes;

    // Calculate world-space positions for cube corners
    vec3 cornerPositions[8];
    ivec3 offsets[8] = ivec3[](ivec3(0, 0, 0), ivec3(1, 0, 0), ivec3(1, 1, 0), ivec3(0, 1, 0),
    ivec3(0, 0, 1), ivec3(1, 0, 1), ivec3(1, 1, 1), ivec3(0, 1, 1));


    for (int i = 0; i < 8; ++i) {
        vec3 gridPos = vec3(globalID + offsets[i]) * voxelSize;
        cornerPositions[i] = u_boundingBoxStart + gridPos;
    }

    // Evaluate the SDF at the corners
    float values[8];
    for (int i = 0; i < 8; ++i) {
        values[i] = map(cornerPositions[i]).x;
    }

    // Determine indexes of intersected vertices
    int cubeIndex = 0;
    for (int i = 0; i < 8; i++) {
        // if inside shape
        if (values[i] < 0) cubeIndex |= (1 << i);
    }

    // Lookup edge flags and triangles
    int edgeFlags = edge_table[cubeIndex];
    if (edgeFlags == 0x0) return; // No surface intersects this cube

    // Interpolate edge vertices
    vec3 edgeVertices[12];
    for (int i = 0; i < 12; i++) {
        // if this edge is intersected by shape
        if (bool(edgeFlags & (1 << i))) {
            int v1 = edgeVertexPairs[i].x;
            int v2 = edgeVertexPairs[i].y;
            vec3 p1 = cornerPositions[v1];
            vec3 p2 = cornerPositions[v2];
            float val1 = values[v1];
            float val2 = values[v2];
            edgeVertices[i] = mix(p1, p2, -val1 / (val2 - val1));
        }
    }

    // Emit triangles
    for (int i = 0; tri_table[cubeIndex * 16 + i] != -1; i += 3) {
        vec3 v0 = edgeVertices[tri_table[cubeIndex * 16 + i]];
        vec3 v1 = edgeVertices[tri_table[cubeIndex * 16 + i + 1]];
        vec3 v2 = edgeVertices[tri_table[cubeIndex * 16 + i + 2]];

        // Write vertices to output buffer
        uint index = atomicAdd(vertex_size, 3);
        vertex_buffer[index + 0] = vec4(v0, 1.0);
        vertex_buffer[index + 1] = vec4(v1, 1.0);
        vertex_buffer[index + 2] = vec4(v2, 1.0);

        vec3 v0_normal = calcNormal(v0);
        vec3 v1_normal = calcNormal(v1);
        vec3 v2_normal = calcNormal(v2);

        normal_buffer[index + 0] = vec4(v0_normal, 1.0);
        normal_buffer[index + 1] = vec4(v1_normal, 1.0);
        normal_buffer[index + 2] = vec4(v2_normal, 1.0);


        // Temporary UVs
        uv_buffer[index] = planarProjection(v0, voxelSize);
        uv_buffer[index + 1] = planarProjection(v1, voxelSize);
        uv_buffer[index + 2] = planarProjection(v2, voxelSize);

    }

}