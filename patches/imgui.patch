diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 00000000..76ad6887
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,15 @@
+cmake_minimum_required(VERSION 3.20)
+
+project(imgui)
+message(STATUS "Configuring " ${PROJECT_NAME})
+
+set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_DISABLE_IN_SOURCE_BUILD TRUE)
+
+file(GLOB IMGUI_SOURCE_FILES
+  "src/imgui/*.cpp"
+  "src/imgui/misc/cpp/imgui_stdlib.cpp")
+
+add_library(${PROJECT_NAME} STATIC ${IMGUI_SOURCE_FILES})
+target_link_libraries(${PROJECT_NAME} PUBLIC glfw)
+target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC src)
diff --git a/imconfig.h b/src/imgui/imconfig.h
similarity index 100%
rename from imconfig.h
rename to src/imgui/imconfig.h
diff --git a/imgui.cpp b/src/imgui/imgui.cpp
similarity index 100%
rename from imgui.cpp
rename to src/imgui/imgui.cpp
diff --git a/imgui.h b/src/imgui/imgui.h
similarity index 100%
rename from imgui.h
rename to src/imgui/imgui.h
diff --git a/imgui_demo.cpp b/src/imgui/imgui_demo.cpp
similarity index 100%
rename from imgui_demo.cpp
rename to src/imgui/imgui_demo.cpp
diff --git a/imgui_draw.cpp b/src/imgui/imgui_draw.cpp
similarity index 100%
rename from imgui_draw.cpp
rename to src/imgui/imgui_draw.cpp
diff --git a/backends/imgui_impl_glfw.cpp b/src/imgui/imgui_impl_glfw.cpp
similarity index 100%
rename from backends/imgui_impl_glfw.cpp
rename to src/imgui/imgui_impl_glfw.cpp
diff --git a/backends/imgui_impl_glfw.h b/src/imgui/imgui_impl_glfw.h
similarity index 100%
rename from backends/imgui_impl_glfw.h
rename to src/imgui/imgui_impl_glfw.h
diff --git a/backends/imgui_impl_opengl3.cpp b/src/imgui/imgui_impl_opengl3.cpp
similarity index 100%
rename from backends/imgui_impl_opengl3.cpp
rename to src/imgui/imgui_impl_opengl3.cpp
diff --git a/backends/imgui_impl_opengl3.h b/src/imgui/imgui_impl_opengl3.h
similarity index 100%
rename from backends/imgui_impl_opengl3.h
rename to src/imgui/imgui_impl_opengl3.h
diff --git a/backends/imgui_impl_opengl3_loader.h b/src/imgui/imgui_impl_opengl3_loader.h
similarity index 100%
rename from backends/imgui_impl_opengl3_loader.h
rename to src/imgui/imgui_impl_opengl3_loader.h
diff --git a/imgui_internal.h b/src/imgui/imgui_internal.h
similarity index 100%
rename from imgui_internal.h
rename to src/imgui/imgui_internal.h
diff --git a/imgui_tables.cpp b/src/imgui/imgui_tables.cpp
similarity index 100%
rename from imgui_tables.cpp
rename to src/imgui/imgui_tables.cpp
diff --git a/imgui_widgets.cpp b/src/imgui/imgui_widgets.cpp
similarity index 100%
rename from imgui_widgets.cpp
rename to src/imgui/imgui_widgets.cpp
diff --git a/imstb_rectpack.h b/src/imgui/imstb_rectpack.h
similarity index 100%
rename from imstb_rectpack.h
rename to src/imgui/imstb_rectpack.h
diff --git a/imstb_textedit.h b/src/imgui/imstb_textedit.h
similarity index 100%
rename from imstb_textedit.h
rename to src/imgui/imstb_textedit.h
diff --git a/imstb_truetype.h b/src/imgui/imstb_truetype.h
similarity index 100%
rename from imstb_truetype.h
rename to src/imgui/imstb_truetype.h
diff --git a/src/imgui/misc/cpp/imgui_stdlib.cpp b/src/imgui/misc/cpp/imgui_stdlib.cpp
new file mode 100644
index 00000000..c9181504
--- /dev/null
+++ b/src/imgui/misc/cpp/imgui_stdlib.cpp
@@ -0,0 +1,82 @@
+// dear imgui: wrappers for C++ standard library (STL) types (std::string, etc.)
+// This is also an example of how you may wrap your own similar types.
+
+// Changelog:
+// - v0.10: Initial version. Added InputText() / InputTextMultiline() calls with std::string
+
+// See more C++ related extension (fmt, RAII, syntaxis sugar) on Wiki:
+//   https://github.com/ocornut/imgui/wiki/Useful-Extensions#cness
+
+#include "imgui_stdlib.h"
+
+// Clang warnings with -Weverything
+#if defined(__clang__)
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wsign-conversion"  // warning: implicit conversion changes signedness
+#endif
+
+struct InputTextCallback_UserData {
+  std::string* Str;
+  ImGuiInputTextCallback ChainCallback;
+  void* ChainCallbackUserData;
+};
+
+static int InputTextCallback(ImGuiInputTextCallbackData* data) {
+  InputTextCallback_UserData* user_data = (InputTextCallback_UserData*)data->UserData;
+  if (data->EventFlag == ImGuiInputTextFlags_CallbackResize) {
+    // Resize string callback
+    // If for some reason we refuse the new length (BufTextLen) and/or capacity (BufSize) we need to set them back to
+    // what we want.
+    std::string* str = user_data->Str;
+    IM_ASSERT(data->Buf == str->c_str());
+    str->resize(data->BufTextLen);
+    data->Buf = (char*)str->c_str();
+  } else if (user_data->ChainCallback) {
+    // Forward to user callback, if any
+    data->UserData = user_data->ChainCallbackUserData;
+    return user_data->ChainCallback(data);
+  }
+  return 0;
+}
+
+bool ImGui::InputText(const char* label, std::string* str, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback,
+                      void* user_data) {
+  IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);
+  flags |= ImGuiInputTextFlags_CallbackResize;
+
+  InputTextCallback_UserData cb_user_data;
+  cb_user_data.Str                   = str;
+  cb_user_data.ChainCallback         = callback;
+  cb_user_data.ChainCallbackUserData = user_data;
+  return InputText(label, (char*)str->c_str(), str->capacity() + 1, flags, InputTextCallback, &cb_user_data);
+}
+
+bool ImGui::InputTextMultiline(const char* label, std::string* str, const ImVec2& size, ImGuiInputTextFlags flags,
+                               ImGuiInputTextCallback callback, void* user_data) {
+  IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);
+  flags |= ImGuiInputTextFlags_CallbackResize;
+
+  InputTextCallback_UserData cb_user_data;
+  cb_user_data.Str                   = str;
+  cb_user_data.ChainCallback         = callback;
+  cb_user_data.ChainCallbackUserData = user_data;
+  return InputTextMultiline(label, (char*)str->c_str(), str->capacity() + 1, size, flags, InputTextCallback,
+                            &cb_user_data);
+}
+
+bool ImGui::InputTextWithHint(const char* label, const char* hint, std::string* str, ImGuiInputTextFlags flags,
+                              ImGuiInputTextCallback callback, void* user_data) {
+  IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);
+  flags |= ImGuiInputTextFlags_CallbackResize;
+
+  InputTextCallback_UserData cb_user_data;
+  cb_user_data.Str                   = str;
+  cb_user_data.ChainCallback         = callback;
+  cb_user_data.ChainCallbackUserData = user_data;
+  return InputTextWithHint(label, hint, (char*)str->c_str(), str->capacity() + 1, flags, InputTextCallback,
+                           &cb_user_data);
+}
+
+#if defined(__clang__)
+#pragma clang diagnostic pop
+#endif
diff --git a/src/imgui/misc/cpp/imgui_stdlib.h b/src/imgui/misc/cpp/imgui_stdlib.h
new file mode 100644
index 00000000..76ababa7
--- /dev/null
+++ b/src/imgui/misc/cpp/imgui_stdlib.h
@@ -0,0 +1,22 @@
+// dear imgui: wrappers for C++ standard library (STL) types (std::string, etc.)
+// This is also an example of how you may wrap your own similar types.
+
+// Changelog:
+// - v0.10: Initial version. Added InputText() / InputTextMultiline() calls with std::string
+
+// See more C++ related extension (fmt, RAII, syntaxis sugar) on Wiki:
+//   https://github.com/ocornut/imgui/wiki/Useful-Extensions#cness
+
+#pragma once
+
+#include <string>
+#include <imgui/imgui.h>
+
+namespace ImGui
+{
+    // ImGui::InputText() with std::string
+    // Because text input needs dynamic resizing, we need to setup a callback to grow the capacity
+    IMGUI_API bool  InputText(const char* label, std::string* str, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = nullptr, void* user_data = nullptr);
+    IMGUI_API bool  InputTextMultiline(const char* label, std::string* str, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = nullptr, void* user_data = nullptr);
+    IMGUI_API bool  InputTextWithHint(const char* label, const char* hint, std::string* str, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = nullptr, void* user_data = nullptr);
+}
diff --git a/backends/vulkan/generate_spv.sh b/src/imgui/vulkan/generate_spv.sh
similarity index 100%
rename from backends/vulkan/generate_spv.sh
rename to src/imgui/vulkan/generate_spv.sh
diff --git a/backends/vulkan/glsl_shader.frag b/src/imgui/vulkan/glsl_shader.frag
similarity index 100%
rename from backends/vulkan/glsl_shader.frag
rename to src/imgui/vulkan/glsl_shader.frag
diff --git a/backends/vulkan/glsl_shader.vert b/src/imgui/vulkan/glsl_shader.vert
similarity index 100%
rename from backends/vulkan/glsl_shader.vert
rename to src/imgui/vulkan/glsl_shader.vert
